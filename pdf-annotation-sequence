#!/usr/bin/python3

import sys
import io
from sys import argv
from os import path, mkdir, system, rename, getcwd, remove
from shutil import copy
import PyPDF2
import progressbar
import unicodedata
from PyPDF2.generic import NameObject
from PyPDF2.pdf import PdfFileWriter

pdf_name = path.join(getcwd(), argv[1])
plane_name = '.' + path.basename(pdf_name)[:-4]
dir_name = path.join(getcwd(), plane_name)
core_name = plane_name[1:] + ' - Reference'
old_ref_name = path.join(dir_name, 'Reference.pdf')
ref_name = path.join(dir_name, core_name + '.pdf')
ann_name = path.join(dir_name, plane_name[1:] + ' - Annotations.pdf')
old_xpp_name = path.join(dir_name, 'Reference.xopp')
old_xpp_name_alt = path.join(dir_name, 'Reference.pdf.xopp')
xpp_name = path.join(dir_name, core_name + '.xopp')
xpp_name_alt = path.join(dir_name, core_name + '.pdf.xopp')
tmp_name = path.join(dir_name, 'temp.pdf')
out_name = path.join(dir_name, 'out.pdf')


def byteclean(string):
    old_stdout = sys.stdout
    sys.stdout = buffer = io.StringIO()
    val = buffer.getvalue()
    sys.stdout = old_stdout
    return val


def bookmark_dict(
        reader,
        writer,
        bookmark_list=None,
        parent=None,
        show=False,
        level=0):
    if bookmark_list is None:
        bookmark_list = reader.getOutlines()
    result = {}
    last_parent = parent
    if level == 0:
        iterator = progressbar.progressbar(bookmark_list)
    else:
        iterator = bookmark_list
    for item in iterator:
        if isinstance(item, list):
            # recursive call
            result.update(
                bookmark_dict(
                    reader,
                    writer,
                    item,
                    last_parent,
                    level=level +
                    1))
        else:
            title = item.title
            num = reader.getDestinationPageNumber(item)
            try:
                last_parent = writer.addBookmark(title, num, parent)
            except BaseException:
                title = byteclean(title)
                title.join(x for x in title if x.isalpha() or x == ' ')
                last_parent = writer.addBookmark(title, num, parent)
    return result


def transfer_annotations(src_name, dst_name):
    src_PDF = PyPDF2.PdfFileReader(src_name, strict=False)
    dst_PDF = PyPDF2.PdfFileReader(dst_name, strict=False)
    out_PDF = PyPDF2.PdfFileWriter()
    num_pages = src_PDF.getNumPages()
    for i in range(num_pages):
        src_Page = src_PDF.getPage(i)
        dst_Page = dst_PDF.getPage(i)
        if '/Annots' in src_Page:
            a = src_Page['/Annots']
            dst_Page[NameObject('/Annots')] = a
        out_PDF.addPage(dst_Page)
    bookmark_dict(src_PDF, out_PDF)
    out_PDF.setPageMode('/UseOutlines')
    info = src_PDF.getDocumentInfo()
    out_PDF.addMetadata(info)
    with open(out_name, "wb") as out:
        out_PDF.write(out)
    remove(dst_name)
    rename(out_name, dst_name)


def remove_annotations(src_name):
    src_PDF = PyPDF2.PdfFileReader(src_name, strict=False)
    out_PDF = PdfFileWriter()
    num_pages = src_PDF.getNumPages()
    for i in range(num_pages):
        out_PDF.addPage(src_PDF.getPage(i))
    bookmark_dict(src_PDF, out_PDF)
    out_PDF.setPageMode('/UseOutlines')
    out_PDF.removeLinks()
    with open(out_name, "wb") as out:
        out_PDF.write(out)
    remove(src_name)
    rename(out_name, src_name)


# Remove all annotations from ref
remove_annotations(ref_name)

# Export from xpp to tmp
system('xournalpp "' + xpp_name + '" -p "' + tmp_name + '"')

# Transfer annotations from ann to tmp
transfer_annotations(ann_name, tmp_name)

# Set tmp to main
copy(tmp_name, pdf_name)
remove(tmp_name)

# Add annotations back to ref
transfer_annotations(ann_name, ref_name)
